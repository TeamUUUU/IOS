#import <Foundation/Foundation.h>
#import "OAIAttachment.h"
#import "OAIBoard.h"
#import "OAIBoards.h"
#import "OAICollaborators.h"
#import "OAIError.h"
#import "OAINote.h"
#import "OAINoteUpdate.h"
#import "OAINotes.h"
#import "OAIApi.h"

/**
* keep4u rest api
* keep4u backend rest api
*
* OpenAPI spec version: 0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIDefaultApi: NSObject <OAIApi>

extern NSString* kOAIDefaultApiErrorDomain;
extern NSInteger kOAIDefaultApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Delete attachment info by id
/// 
///
/// @param attachmentId UUID of attachment
/// @param authorization Google ClientID token
/// 
///  code:204 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return void
-(NSURLSessionTask*) attachmentsAttachmentIdDeleteWithAttachmentId: (NSString*) attachmentId
    authorization: (NSString*) authorization
    completionHandler: (void (^)(NSError* error)) handler;


/// Get attachment info by id
/// 
///
/// @param attachmentId UUID of attachment
/// @param authorization Google ClientID token
/// 
///  code:200 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return OAIAttachment*
-(NSURLSessionTask*) attachmentsAttachmentIdGetWithAttachmentId: (NSString*) attachmentId
    authorization: (NSString*) authorization
    completionHandler: (void (^)(OAIAttachment* output, NSError* error)) handler;


/// Upload attachment to server
/// 
///
/// @param authorization Google ClientID token
/// @param file  (optional)
/// 
///  code:201 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return OAIAttachment*
-(NSURLSessionTask*) attachmentsPostWithAuthorization: (NSString*) authorization
    file: (NSURL*) file
    completionHandler: (void (^)(OAIAttachment* output, NSError* error)) handler;


/// 
/// Adds collaborators to board. Returns all board's collaborators.
///
/// @param authorization Google ClientID token
/// @param requestBody  (optional)
/// 
///  code:200 message:"Collaborators was successfully added",
///  code:400 message:"Some of the request parameters is invalid",
///  code:404 message:"Board not found"
///
/// @return OAICollaborators*
-(NSURLSessionTask*) boardsBoardIdCollaboratorsPatchWithAuthorization: (NSString*) authorization
    requestBody: (NSArray<NSString*>*) requestBody
    completionHandler: (void (^)(OAICollaborators* output, NSError* error)) handler;


/// Delete board by id
/// 
///
/// @param boardId UUID of board
/// @param authorization Google ClientID token
/// 
///  code:204 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return void
-(NSURLSessionTask*) boardsBoardIdDeleteWithBoardId: (NSString*) boardId
    authorization: (NSString*) authorization
    completionHandler: (void (^)(NSError* error)) handler;


/// Get board by id
/// 
///
/// @param boardId UUID of board
/// @param authorization Google ClientID token
/// 
///  code:200 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return OAIBoard*
-(NSURLSessionTask*) boardsBoardIdGetWithBoardId: (NSString*) boardId
    authorization: (NSString*) authorization
    completionHandler: (void (^)(OAIBoard* output, NSError* error)) handler;


/// Get notes for board
/// 
///
/// @param authorization Google ClientID token
/// 
///  code:200 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return OAINotes*
-(NSURLSessionTask*) boardsBoardIdNotesGetWithAuthorization: (NSString*) authorization boardId:(NSString*)boardId
    completionHandler: (void (^)(OAINotes* output, NSError* error)) handler;


/// Create new note on board
/// 
///
/// @param authorization Google ClientID token
/// @param note  (optional)
/// 
///  code:201 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return OAINote*
-(NSURLSessionTask*) boardsBoardIdNotesPostWithAuthorization: (NSString*) authorization boardId:(NSString*) boardId
    note: (OAINote*) note
    completionHandler: (void (^)(OAINote* output, NSError* error)) handler;


/// Update board parameters
/// Update board parameters. Note: collaborators array will be replaced by this method. Use /boards/{board_id}/collaborators if you want to append collaborators to board. 
///
/// @param boardId UUID of board
/// @param authorization Google ClientID token
/// @param board  (optional)
/// 
///  code:200 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return OAIBoard*
-(NSURLSessionTask*) boardsBoardIdPatchWithBoardId: (NSString*) boardId
    authorization: (NSString*) authorization
    board: (OAIBoard*) board
    completionHandler: (void (^)(OAIBoard* output, NSError* error)) handler;


/// Get user boards
/// Gets all boards for current user 
///
/// @param authorization Google ClientID token
/// 
///  code:200 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return OAIBoards*
-(NSURLSessionTask*) boardsGetWithAuthorization: (NSString*) authorization
    completionHandler: (void (^)(OAIBoards* output, NSError* error)) handler;


/// Create new board
/// Create new board for current user 
///
/// @param authorization Google ClientID token
/// @param board  (optional)
/// 
///  code:201 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return OAIBoard*
-(NSURLSessionTask*) boardsPostWithAuthorization: (NSString*) authorization
    board: (OAIBoard*) board
    completionHandler: (void (^)(OAIBoard* output, NSError* error)) handler;


/// Delete note by id
/// 
///
/// @param noteId UUID of note
/// @param authorization Google ClientID token
/// 
///  code:204 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return void
-(NSURLSessionTask*) notesNoteIdDeleteWithNoteId: (NSString*) noteId
    authorization: (NSString*) authorization
    completionHandler: (void (^)(NSError* error)) handler;


/// Get note by id
/// 
///
/// @param noteId UUID of note
/// @param authorization Google ClientID token
/// 
///  code:200 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return OAINote*
-(NSURLSessionTask*) notesNoteIdGetWithNoteId: (NSString*) noteId
    authorization: (NSString*) authorization
    completionHandler: (void (^)(OAINote* output, NSError* error)) handler;


/// Update note content
/// 
///
/// @param noteId UUID of note
/// @param authorization Google ClientID token
/// @param noteUpdate  (optional)
/// 
///  code:200 message:"Ok",
///  code:500 message:"Server internal error"
///
/// @return OAINote*
-(NSURLSessionTask*) notesNoteIdPatchWithNoteId: (NSString*) noteId
    authorization: (NSString*) authorization
    noteUpdate: (OAINoteUpdate*) noteUpdate
    completionHandler: (void (^)(OAINote* output, NSError* error)) handler;


/// Search notes by related text
/// 
///
/// @param text 
/// @param authorization Google ClientID token
/// @param limit text to be searched in notes (optional) (default to @10)
/// @param asc should notes be returned in descending(default) or ascending order. (optional) (default to @(NO))
/// 
///  code:200 message:"Notes ordered by creation date",
///  code:500 message:"Server internal error"
///
/// @return OAINotes*
-(NSURLSessionTask*) searchNotesGetWithText: (NSString*) text
    authorization: (NSString*) authorization
    limit: (NSNumber*) limit
    asc: (NSNumber*) asc
    completionHandler: (void (^)(OAINotes* output, NSError* error)) handler;



@end
